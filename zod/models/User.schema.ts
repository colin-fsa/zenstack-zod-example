/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
const baseSchema = z.object({
    id: z.string(),
    zipCode: z.string().regex(new RegExp("^[0-9a-zA-Z]{4,16}$")).nullish(),
}
).strict();

/**
 * `User` schema excluding foreign keys and relations.
 */
export const UserScalarSchema = baseSchema;


/**
 * `User` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export const UserSchema = UserScalarSchema;


/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export const UserPrismaCreateSchema = baseSchema.partial().passthrough();


/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export const UserPrismaUpdateSchema = z.object({
    id: z.string(),
    zipCode: z.string().regex(new RegExp("^[0-9a-zA-Z]{4,16}$")).nullish()
}).partial().passthrough();


/**
 * `User` schema for create operations excluding foreign keys and relations.
 */
export const UserCreateScalarSchema = baseSchema.partial({
    id: true
});


/**
 * `User` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export const UserCreateSchema = baseSchema.partial({
    id: true
});


/**
 * `User` schema for update operations excluding foreign keys and relations.
 */
export const UserUpdateScalarSchema = baseSchema.partial();


/**
 * `User` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export const UserUpdateSchema = UserUpdateScalarSchema;

